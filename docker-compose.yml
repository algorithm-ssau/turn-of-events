version: '3.8'

services:
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=afisha_db
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin123
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka-1:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
    volumes:
      - kafka_data_1:/var/lib/kafka/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --list --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka-2:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
      - kafka-1
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:29093,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
    volumes:
      - kafka_data_2:/var/lib/kafka/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --list --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  pgadmin:
    image: dpage/pgadmin4:latest
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - app-network
    depends_on:
      - postgres

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8082:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka-1:29092,kafka-2:29093
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - app-network
    depends_on:
      - kafka-1
      - kafka-2
      - zookeeper

  mongo-ui:
    image: mongo-express:latest
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=admin123
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin123
    networks:
      - app-network
    depends_on:
      - mongodb

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost/api
      - HOST=0.0.0.0
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - app-network
    depends_on:
      - nginx
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:5173"]
      interval: 10s
      timeout: 5s
      retries: 3

  user_service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    networks:
      - app-network
    depends_on:
      - postgres

  # Новый сервис для Go-парсера
  parser:
    build:
      context: ./parser-service
      dockerfile: Dockerfile
    environment:
      - KAFKA_BROKER=kafka-1:29092
      - MONGO_URI=mongodb://admin:admin123@mongodb:27017
      - GROUP_ID=1
      - TOPIC=parsing
    depends_on:
      - mongodb
      - kafka-1
      - kafka-2
      - zookeeper
    networks:
      - app-network

  admin_service:
    build:
      context: ./utils-service
      dockerfile: Dockerfile
    ports:
      - "8182:8182"
    environment:
      - KAFKA_BROKER=kafka-1:29092
      - GROUP_ID=1
      - TOPIC=parsing
    networks:
      - app-network
    depends_on:
      - postgres

  rate-calculator:
    build:
      context: ./rate-calculator
      dockerfile: Dockerfile
    environment:
      # TODO make topic in Kafka and change DB name
      - KAFKA_BROKERS=kafka-1:29092,kafka-2:29093
      - KAFKA_TOPIC=product_rating_update
      - PG_CONN_STR=dbname=your_db user=admin password=admin123 host=postgres
    networks:
      - app-network
    depends_on:
      - kafka-1
      - kafka-2
      - postgres
  
  review-feedback-service:
    build:
      context: .
      dockerfile: review-feedback-service/Dockerfile
    ports:
    - "5632:5632"
    networks:
      - app-network
    depends_on:
      - postgres
    environment:
      - KAFKA_BROKER=kafka-1:29092
      - KAFKA_TOPIC=product_rating_update
      - PG_CONN_STR=dbname=your_db user=admin password=admin123 host=postgres
      - MONGO_URI=mongodb://admin:admin123@mongodb:27017

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  mongodb_data:
  kafka_data_1:
  kafka_data_2:
  pgadmin_data:
  mongo_express_data:
